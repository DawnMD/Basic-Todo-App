{"version":3,"sources":["components/UI/Card.js","components/Todo.js","App.js","reportWebVitals.js","index.js"],"names":["Card","title","body","deleteHandler","id","console","log","className","onClick","e","Todo","useState","addTask","setAddTask","taskDetails","setTaskDetails","taskList","setTaskList","preventDefault","filter","task","focusChangeHandler","target","value","type","onChange","onFocus","event","deets","Math","floor","random","notes","style","padding","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRA+BeA,MAvBf,YAAmD,IAAnCC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,cAAeC,EAAM,EAANA,GAG1C,OAFAC,QAAQC,IAAIJ,GAGV,qBAAKK,UAAU,kBAAf,SACE,sBAAKA,UAAU,eAAf,UACE,qBAAKA,UAAU,aAAf,SACE,6BAAKN,MAEP,qBAAKM,UAAU,YAAf,SACE,4BAAIL,MAEN,wBACEK,UAAU,kBACVC,QAAS,SAACC,GAAD,OAAON,EAAcM,EAAGL,IAFnC,0BCmGOM,MA/Gf,WACE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAyCMd,EAAgB,SAACM,EAAGL,GACxBK,EAAES,iBACFD,EAAYD,EAASG,QAAO,SAACC,GAAD,OAAUA,EAAKhB,KAAOA,OAO9CiB,EAAqB,SAACZ,GAC1BA,EAAEa,OAAOC,MAAQ,IAGnB,OACE,sBAAKhB,UAAU,eAAf,UACE,qBAAKA,UAAU,IAAf,qCACA,sBAAKA,UAAU,mBAAf,UACE,sBAAMA,UAAU,mBAAmBH,GAAG,eAAtC,uBAGA,uBACEoB,KAAK,OACLjB,UAAU,eACV,aAAW,WACXkB,SA3DkB,SAAChB,GACzBA,EAAES,iBACFL,EAAWJ,EAAEa,OAAOC,QA0DdG,QAASL,EACT,mBAAiB,oBAGrB,sBAAKd,UAAU,mBAAf,UACE,sBAAMA,UAAU,mBAAmBH,GAAG,eAAtC,yBAGA,0BACEoB,KAAK,OACLjB,UAAU,eACV,aAAW,WACXkB,SA/DoB,SAAChB,GAC3BA,EAAES,iBACFH,EAAeN,EAAEa,OAAOC,QA8DlBG,QAASL,EACT,mBAAiB,oBAGrB,wBAAQd,UAAU,kBAAkBC,QA3DnB,SAACmB,GAEpB,GADAA,EAAMT,iBACU,KAAZN,GAAkC,KAAhBE,EAAoB,CACxC,IAAIc,EAAQ,CACVxB,GAAIyB,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBR,MAAOX,EACPoB,MAAOlB,GAETG,EAAY,GAAD,mBAAKD,GAAL,CAAeY,OAmD1B,wBAGA,uBACA,uBAECZ,IAAa,GACZ,qBAAKT,UAAU,YAAY0B,MAAO,CAAEC,QAAS,OAA7C,SACGlB,EAASmB,KAAI,SAACf,GAAD,OACZ,mCACE,cAAC,EAAD,CACEnB,MAAOmB,EAAKG,MACZrB,KAAMkB,EAAKY,MAEX7B,cAAeA,EACfC,GAAIgB,EAAKhB,IAFJgB,EAAKhB,WAOhB,SCvGKgC,MARf,WACE,OACE,qBAAK7B,UAAU,MAAf,SACE,cAAC,EAAD,OCMS8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.135b69ea.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\n/**\r\n *\r\n * @param {*} title received from Todo.js\r\n * @returns the card component\r\n */\r\nfunction Card({ title, body, deleteHandler, id }) {\r\n  console.log(body);\r\n\r\n  return (\r\n    <div className=\"card-container \">\r\n      <div className=\"card-content\">\r\n        <div className=\"card-title\">\r\n          <h3>{title}</h3>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <p>{body}</p>\r\n        </div>\r\n        <button\r\n          className=\"btn btn-warning\"\r\n          onClick={(e) => deleteHandler(e, id)}\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React, { useState } from \"react\";\r\nimport \"./Todo.css\";\r\nimport Card from \"./UI/Card\";\r\n\r\n/**\r\n *\r\n * @returns The block component that is being rendered\r\n */\r\nfunction Todo() {\r\n  const [addTask, setAddTask] = useState(\"\");\r\n  const [taskDetails, setTaskDetails] = useState(\"\");\r\n  const [taskList, setTaskList] = useState([]);\r\n\r\n  /**\r\n   * Set Value of the title\r\n   * @param {*} e , is an eventListener\r\n   */\r\n  const handleTitleChange = (e) => {\r\n    e.preventDefault();\r\n    setAddTask(e.target.value);\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param {*} e\r\n   */\r\n  const handleDetailsChange = (e) => {\r\n    e.preventDefault();\r\n    setTaskDetails(e.target.value);\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param {*} event\r\n   */\r\n  const clickHandler = (event) => {\r\n    event.preventDefault();\r\n    if (addTask !== \"\" && taskDetails !== \"\") {\r\n      var deets = {\r\n        id: Math.floor(Math.random() * 10000),\r\n        value: addTask,\r\n        notes: taskDetails,\r\n      };\r\n      setTaskList([...taskList, deets]);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Delete the respective item when \"Delete\" button is pressed\r\n   * @param {*} e , eventListener\r\n   * @param {*} id , unique ID generated on every new task\r\n   */\r\n  const deleteHandler = (e, id) => {\r\n    e.preventDefault();\r\n    setTaskList(taskList.filter((task) => task.id !== id));\r\n  };\r\n\r\n  /**\r\n   * onFocus\r\n   * @param {*} e eventListener\r\n   */\r\n  const focusChangeHandler = (e) => {\r\n    e.target.value = \"\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"container c \">\r\n      <div className=\"h\">Note Taking Application</div>\r\n      <div className=\"input-group mb-3\">\r\n        <span className=\"input-group-text\" id=\"basic-addon1\">\r\n          Add Title\r\n        </span>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          aria-label=\"Add Task\"\r\n          onChange={handleTitleChange}\r\n          onFocus={focusChangeHandler}\r\n          aria-describedby=\"basic-addon1\"\r\n        />\r\n      </div>\r\n      <div className=\"input-group mb-3\">\r\n        <span className=\"input-group-text\" id=\"basic-addon1\">\r\n          Add Details\r\n        </span>\r\n        <textarea\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          aria-label=\"Add Task\"\r\n          onChange={handleDetailsChange}\r\n          onFocus={focusChangeHandler}\r\n          aria-describedby=\"basic-addon1\"\r\n        />\r\n      </div>\r\n      <button className=\"btn btn-primary\" onClick={clickHandler}>\r\n        Add a Task\r\n      </button>\r\n      <br />\r\n      <br />\r\n\r\n      {taskList !== [] ? (\r\n        <div className=\"container\" style={{ padding: \"0px\" }}>\r\n          {taskList.map((task) => (\r\n            <>\r\n              <Card\r\n                title={task.value}\r\n                body={task.notes}\r\n                key={task.id}\r\n                deleteHandler={deleteHandler}\r\n                id={task.id}\r\n              />\r\n            </>\r\n          ))}\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import \"./App.css\";\nimport Todo from \"./components/Todo\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}