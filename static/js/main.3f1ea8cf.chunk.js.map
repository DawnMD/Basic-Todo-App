{"version":3,"sources":["components/Todo.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","useState","addTask","setAddTask","taskList","setTaskList","className","class","id","type","onChange","e","preventDefault","target","value","onFocus","onClick","deets","Math","floor","random","map","task","filter","deleteHandler","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQA2EeA,MAxEf,WACE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KA2BA,OACE,sBAAKC,UAAU,eAAf,UACE,sBAAKC,MAAM,mBAAX,UACE,sBAAMA,MAAM,mBAAmBC,GAAG,eAAlC,sBAGA,uBACEC,KAAK,OACLF,MAAM,eAEN,aAAW,WACXG,SApCa,SAACC,GACpBA,EAAEC,iBACFT,EAAWQ,EAAEE,OAAOC,QAmCdC,QAhBmB,SAACJ,GAC1BA,EAAEE,OAAOC,MAAQ,IAgBX,mBAAiB,oBAGrB,wBAAQR,UAAU,kBAAkBU,QApCnB,SAACL,GAEpB,GADAA,EAAEC,iBACc,KAAZV,EAAgB,CAClB,IAAIe,EAAQ,CACVT,GAAIU,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBN,MAAOZ,GAETG,EAAY,GAAD,mBAAKD,GAAL,CAAea,OA6B1B,wBAGA,uBACA,uBACCb,IAAa,GACZ,qBAAKE,UAAU,OAAf,SACE,qBAAKA,UAAU,YAAf,SACGF,EAASiB,KAAI,SAACC,GAAD,OACZ,+BACGA,EAAKR,MACN,uBACA,wBACER,UAAU,kBACVU,QAAS,SAACL,GAAD,OAvCH,SAACA,EAAGH,GACxBG,EAAEC,iBACFP,EAAYD,EAASmB,QAAO,SAACD,GAAD,OAAUA,EAAKd,KAAOA,MAqCpBgB,CAAcb,EAAGW,EAAKd,KAFxC,sBAHOc,EAAKd,WAalB,SC3DKiB,MARf,WACE,OACE,qBAAKnB,UAAU,MAAf,SACE,cAAC,EAAD,OCMSoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3f1ea8cf.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Todo.css\";\r\n\r\nfunction Todo() {\r\n  const [addTask, setAddTask] = useState(\"\");\r\n  const [taskList, setTaskList] = useState([]);\r\n\r\n  const handleChange = (e) => {\r\n    e.preventDefault();\r\n    setAddTask(e.target.value);\r\n  };\r\n\r\n  const clickHandler = (e) => {\r\n    e.preventDefault();\r\n    if (addTask !== \"\") {\r\n      var deets = {\r\n        id: Math.floor(Math.random() * 10000),\r\n        value: addTask,\r\n      };\r\n      setTaskList([...taskList, deets]);\r\n    }\r\n  };\r\n\r\n  const deleteHandler = (e, id) => {\r\n    e.preventDefault();\r\n    setTaskList(taskList.filter((task) => task.id !== id));\r\n  };\r\n\r\n  const focusChangeHandler = (e) => {\r\n    e.target.value = \"\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"container c \">\r\n      <div class=\"input-group mb-3\">\r\n        <span class=\"input-group-text\" id=\"basic-addon1\">\r\n          Add Task\r\n        </span>\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          // placeholder=\"Add Task\"\r\n          aria-label=\"Add Task\"\r\n          onChange={handleChange}\r\n          onFocus={focusChangeHandler}\r\n          aria-describedby=\"basic-addon1\"\r\n        />\r\n      </div>\r\n      <button className=\"btn btn-primary\" onClick={clickHandler}>\r\n        Add a Task\r\n      </button>\r\n      <br />\r\n      <br />\r\n      {taskList !== [] ? (\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            {taskList.map((task) => (\r\n              <ul key={task.id}>\r\n                {task.value}\r\n                <br />\r\n                <button\r\n                  className=\"btn btn-warning\"\r\n                  onClick={(e) => deleteHandler(e, task.id)}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </ul>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import \"./App.css\";\nimport Todo from \"./components/Todo\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}